{"version":3,"sources":["apis/jsonPlaceholder.js","components/PostHeader.js","actions/index.js","components/Comment.js","components/CommentPage.js","components/PostList.js","components/App.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","connect","state","posts","fetchPost","id","index","dispatch","a","jsonPlaceholder","get","post","type","payload","data","userId","userIndex","useEffect","className","key","to","onClick","window","scrollTo","style","marginBottom","title","score","by","Date","time","toLocaleString","comments","fetchComment","commentId","commentIndex","useState","nestedCommentsToggle","setNestedCommentsToggle","nestedComments","setNestedComments","getNestedComments","kids","comment","text","prev","marginTop","cursor","dangerouslySetInnerHTML","__html","marginLeft","map","ownProps","match","params","pageNum","commentsToggle","setCommentsToggle","intervalId","setInterval","clearInterval","CommentPage","paddingBottom","href","url","descendants","path","exact","component","ids","fetchPostIds","response","postIds","sort","b","splice","newsToggle","setNewsToggle","intId","backgroundColor","App","combineReducers","action","newArray","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.77cb2109.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://hacker-news.firebaseio.com/v0\",\n});\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchPost } from \"../actions\";\nimport { Link } from \"react-router-dom\";\n\nconst PostHeader = ({ fetchPost, userId, userIndex, posts }) => {\n  useEffect(() => {\n    fetchPost(userId, userIndex);\n  }, [fetchPost, userId, userIndex]);\n\n  return (\n    <div className=\"item\" key={userId}>\n      {/* to not show a post if a json is null  */}\n      {posts[userIndex] && (\n        <div className=\"content\">\n          <div className=\"description\">\n            <Link\n              to={`/${userIndex}`}\n              onClick={() => {\n                window.scrollTo(0, 0);\n              }}\n            >\n              <h2 style={{ marginBottom: \"10px\" }}>\n                {posts[userIndex]?.title}\n              </h2>\n            </Link>\n            <p>\n              <b>Score: </b> {posts[userIndex]?.score}\n            </p>\n            <p>\n              <b>Author: </b> {posts[userIndex]?.by}\n            </p>\n            <p>\n              <b>Date and time: </b>\n              {new Date(1000 * posts[userIndex]?.time).toLocaleString()}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { posts: state.posts };\n};\n\nexport default connect(mapStateToProps, { fetchPost })(PostHeader);\n","import jsonPlaceholder from \"../apis/jsonPlaceholder\";\n\nconst numOfPosts = 100;\n\nexport const fetchPostIds = () => async (dispatch) => {\n  //P.S. to see top stories input \"topstories\" where there are more comments\n  const response = await jsonPlaceholder.get(\"/newstories.json\");\n  const postIds = response.data.sort((a, b) => b > a).splice(0, numOfPosts);\n  dispatch({\n    type: \"FETCH_IDS\",\n    payload: postIds,\n  });\n};\n\nexport const fetchComment = (id, index) => async (dispatch) => {\n  const post = await jsonPlaceholder.get(`/item/${id}.json`);\n  dispatch({\n    type: \"FETCH_COMMENT\",\n    payload: post.data,\n    index,\n  });\n};\n\nexport const fetchPost = (id, index) => async (dispatch) => {\n  const post = await jsonPlaceholder.get(`/item/${id}.json`);\n  dispatch({\n    type: \"FETCH_POST\",\n    payload: post.data,\n    index,\n  });\n};\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchComment } from \"../actions\";\r\nimport jsonPlaceholder from \"../apis/jsonPlaceholder\";\r\n\r\nconst Comment = ({ fetchComment, commentId, commentIndex, comments }) => {\r\n  useEffect(() => {\r\n    fetchComment(commentId, commentIndex);\r\n  }, [fetchComment, commentId, commentIndex]);\r\n\r\n  // are nested comments open?\r\n  let [nestedCommentsToggle, setNestedCommentsToggle] = useState(false);\r\n  let [nestedComments, setNestedComments] = useState([]);\r\n\r\n  const getNestedComments = async () => {\r\n    setNestedComments([]);\r\n    setNestedCommentsToggle(!nestedCommentsToggle);\r\n    // if there are children and we open then load comments\r\n    if (comments[commentIndex].kids && !nestedCommentsToggle) {\r\n      for (let id of comments[commentIndex].kids) {\r\n        const post = await jsonPlaceholder.get(`/item/${id}.json`);\r\n        const comment = post.data.text;\r\n        setNestedComments((prev) => [...prev, comment]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={getNestedComments} className=\"item\" key={commentId}>\r\n      {comments[commentIndex]?.text && (\r\n        <p style={{ marginTop: \"5px\" }}>\r\n          {nestedCommentsToggle ? (\r\n            <i className=\"angle down icon\" />\r\n          ) : (\r\n            <i className=\"angle up icon\" />\r\n          )}\r\n          <b style={{ cursor: \"pointer\" }}>Comment {commentIndex}: </b>\r\n          <span\r\n            dangerouslySetInnerHTML={{ __html: comments[commentIndex]?.text }}\r\n          ></span>\r\n        </p>\r\n      )}\r\n      <div style={{ marginLeft: \"2rem\" }}>\r\n        {nestedCommentsToggle &&\r\n          nestedComments.map((text, index) => {\r\n            return (\r\n              text && (\r\n                <span\r\n                  key={index}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: `${index + 1}) ${text} <br></br>`,\r\n                  }}\r\n                ></span>\r\n              )\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { comments: state.comments };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchComment })(Comment);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport Comment from \"./Comment\";\r\n\r\nconst CommentPage = ({\r\n  match: {\r\n    params: { pageNum },\r\n  },\r\n  post,\r\n}) => {\r\n  let [commentsToggle, setCommentsToggle] = useState(true);\r\n  useEffect(() => {\r\n    let intervalId = setInterval(() => {\r\n      setCommentsToggle(!commentsToggle);\r\n    }, 60000);\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [commentsToggle]);\r\n\r\n  const CommentPage = () => {\r\n    return (\r\n      <div style={{ paddingBottom: \"2rem\" }}>\r\n        <Link\r\n          to={\"/\"}\r\n          onClick={() => {\r\n            window.scrollTo(0, 0);\r\n          }}\r\n        >\r\n          <button className=\"ui red button\" style={{}}>\r\n            Go back\r\n          </button>\r\n        </Link>\r\n        <button\r\n          onClick={() => {\r\n            setCommentsToggle(!commentsToggle);\r\n          }}\r\n          className=\"ui primary button\"\r\n          style={{}}\r\n        >\r\n          Reload\r\n        </button>\r\n        <div className=\"ui relaxed divided list\">\r\n          <div className=\"item\">\r\n            <div className=\"content\">\r\n              <h2 style={{ marginBottom: \"10px\" }}>{post?.title}</h2>\r\n              <div className=\"description\">\r\n                <p>\r\n                  {/* an additional space to remove a warning */}\r\n                  <b>URL: </b> <a href={`${post?.url} `}>{post?.url}</a>\r\n                </p>\r\n                <p>\r\n                  <b>Number of comments: </b> {post?.descendants}\r\n                </p>\r\n                <p>\r\n                  <b>Author: </b> {post?.by}\r\n                </p>\r\n                <p>\r\n                  <b>Date and time: </b>\r\n                  {new Date(1000 * post?.time).toLocaleString()}\r\n                </p>\r\n              </div>\r\n              <h1>Comment Section</h1>\r\n              {post?.kids?.map((id, index) => {\r\n                return <Comment key={id} commentId={id} commentIndex={index} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <Route path={\"/\" + pageNum} exact component={CommentPage} />;\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { post: state.posts[ownProps.match.params.pageNum] };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(CommentPage);\r\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchPostIds } from \"../actions\";\nimport PostHeader from \"./PostHeader\";\nimport CommentPage from \"./CommentPage\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nconst PostList = ({ fetchPostIds, ids }) => {\n  let [newsToggle, setNewsToggle] = useState(true);\n\n  useEffect(() => {\n    fetchPostIds();\n    //refetch posts every minute\n    let intId = setInterval(() => {\n      fetchPostIds();\n    }, 60000);\n    return () => {\n      clearInterval(intId);\n    };\n  }, [fetchPostIds]);\n\n  const MainPage = () => {\n    return (\n      <div>\n        <button\n          onClick={() => setNewsToggle(!newsToggle)}\n          className=\"ui primary button\"\n          style={{}}\n        >\n          Reload\n        </button>\n        <div className=\"ui relaxed divided list\">\n          {ids.map((id, index) => {\n            return <PostHeader key={id} userId={id} userIndex={index} />;\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    // Hash router to work on github pages\n    <HashRouter>\n      <h1 style={{ backgroundColor: \"#98acf8\" }}>\n        <i className=\"hacker news icon\" />\n        Hacker News\n      </h1>\n      <Route path=\"/\" exact component={MainPage} />\n      <Route path=\"/:pageNum\" component={CommentPage} />\n    </HashRouter>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { ids: state.ids };\n};\n\nexport default connect(mapStateToProps, { fetchPostIds })(PostList);\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nconst postIdsReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"FETCH_IDS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst fetchPostReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"FETCH_POST\":\n      const newArray = [...state];\n      newArray[action.index] = action.payload;\n      return newArray;\n    default:\n      return state;\n  }\n};\n\nconst fetchCommentReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"FETCH_COMMENT\":\n      const newArray = [...state];\n      newArray[action.index] = action.payload;\n      return newArray;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  ids: postIdsReducer,\n  posts: fetchPostReducer,\n  comments: fetchCommentReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}